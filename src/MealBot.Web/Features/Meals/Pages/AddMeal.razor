@page "/meals/add"
@layout ModalLayout
@attribute [Authorize]
@inject IMealService _mealService
@inject NavigationManager NavigationManager

<PageTitle>Add Meal</PageTitle>
<form method="post" @onsubmit="Submit">

    <div class="row">
        <div class="col-auto">
            <button type="submit" class="btn btn-primary-outline ms-auto"
                @onclick='() => NavigationManager.NavigateTo("/meals")'>
                <i class="fa-solid fa-chevron-left fa-xl"></i>
            </button>
        </div>
        <div class="col">
            <h1>Add Meal</h1>
            <p class="text-muted">Add a meal to your collection.</p>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary ms-auto" disabled="@_isSubmitting">
                <i class="fa-solid fa-floppy-disk"></i>
            </button>
        </div>
    </div>

    <div class="mb-3">
        <label for="nameInput" class="form-label">Name</label>
        <InputText @bind-Value="@Model.Name" class="form-control" id="nameInput" required />
    </div>
    <div class=" mb-3">
        <label for="descriptionInput" class="form-label">
            Description
            <span class="text-muted">(optional)</span>
        </label>
        <InputTextArea @bind-Value="@Model.Description" class="form-control" id="descriptionInput" />
    </div>

    <div class="contaier">
        <div class="row">
            <div class="col">
                <h4>Dishes</h4>
                <p class="text-muted">
                    Dishes are the different parts of the meal. Add the main course, side dishes, and even dessert!
                </p>
            </div>
            <div class="col-auto">
                <a class="link-success" @onclick="AddPart">
                    <i class="fa-solid fa-circle-plus fa-2xl"></i>
                </a>
            </div>
        </div>
    </div>
    @if (Model.Parts.Count == 0)
    {
        <div class="border rounded p-3 text-center text-muted">
            No dishes added yet.
        </div>
    }

    @foreach (var part in Model.Parts)
    {
        <div class="border rounded mb-2 p-2">
            <div class="row">
                <div class="col">
                    <h5>
                        @if (string.IsNullOrEmpty(part.Name))
                        {
                            <span class="text-muted">New Dish</span>
                        }
                        else
                        {
                            <span>@part.Name</span>
                        }
                    </h5>
                </div>
                <div class="col-auto">
                    <a class="link-danger" @onclick="() => RemovePart(part)">
                        <i class="fa-solid fa-trash-can fa-lg"></i>
                    </a>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-auto">
                    <label for="@($"dishCategory{Model.Parts.IndexOf(part)}Input")" class="form-label">Category</label>
                    <InputSelect @bind-Value="@part.Category" id="@($"dishCategory{Model.Parts.IndexOf(part)}Input")"
                        class="form-select" aria-label="Dish Category" required>
                        @foreach (var category in MealPartCategories)
                        {
                            <option value="@category">
                                @_mealService.GetEmojiForCategory(category)
                                @category.ToString()
                            </option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <label for="@($"dishName{Model.Parts.IndexOf(part)}Input")" class="form-label"
                        aria-label="Dish Name">Name</label>
                    <InputText @bind-Value="@part.Name" id="@($"dishName{Model.Parts.IndexOf(part)}Input")"
                        class="form-control" required />
                </div>
            </div>
            <div class="mb-3">
                <label for="@($"dishDescription{Model.Parts.IndexOf(part)}Input")" class="form-label">
                    Description
                    <span class="text-muted">(optional)</span>
                </label>
                <InputTextArea @bind-Value="@part.Description" id="@($"dishDescription{Model.Parts.IndexOf(part)}Input")"
                    class="form-control" />
            </div>
            <div class="mb-3">
                <label for="@($"dishUrl{Model.Parts.IndexOf(part)}Input")" class="form-label" aria-label="Dish Name">
                    Link to Recipe
                    <span class="text-muted">(optional)</span>
                </label>
                <InputText @bind-Value="@part.Url" id="@($"dishUrl{Model.Parts.IndexOf(part)}Input")"
                    class="form-control" />
            </div>
        </div>
    }
</form>

@code
{
    [SupplyParameterFromForm]
    public required MealFormModel Model { get; set; }

    private bool _isSubmitting = false;

    private IEnumerable<MealPartCategory> MealPartCategories => Enum
    .GetValues<MealPartCategory>()
    .Cast<MealPartCategory>();

    protected override void OnInitialized() => Model ??= new MealFormModel { Name = "" };
    private void AddPart() => Model!.Parts.Add(new MealFormModel.MealPartFormModel());
    private void RemovePart(MealFormModel.MealPartFormModel part) => Model!.Parts.Remove(part);

    private async Task Submit()
    {
        _isSubmitting = true;

        var mealRequest = new CreateMealRequest(
        Model.Name,
        Model.Description,
        Model.Parts.Select(p => new MealPart
            {
                Category = p.Category,
                Name = p.Name,
                Description = p.Description,
                Url = p.Url
            }).ToList()
        );

        await _mealService.AddMealAsync(mealRequest, CancellationToken.None);

        NavigationManager.NavigateTo("/meals");

        _isSubmitting = false;
    }
}