@page "/meals"
@attribute [Authorize]
@inject IMealService _mealService
@inject IUserService _userService

<PageTitle>Meals</PageTitle>

<div class="row align-items-center pb-2">
    <div class="col">
        <h1>My Meals</h1>
    </div>
    <div class="col-auto ms-auto">
        <a class="btn btn-primary btn" href="/meals/add">
            <i class="fa-solid fa-circle-plus"></i>
            <span class="ms-1">Add Meal</span>
        </a>
    </div>
</div>
<div class="">
    @if (_userMealsResponse.IsProcessing)
    {
        <p>Loading your meals...</p>

    }
    else if (_userMealsResponse.IsError)
    {
        <p class="text-center text-danger">Error loading your meals...</p>
    }
    else if ((_userMealsResponse.Value.Count == 0))
    {
        <p class="text-muted text-center my-5">You have no meals...</p>
    }
    else
    {
        <div class="row">
            @foreach (var meal in _userMealsResponse.Value)
            {
                <Section Css="col-sm-6">
                    <MealRow Meal="@meal" OnDelete="HandleDelete" />
                </Section>
            }
        </div>
    }
</div>
@if (!_userResponse.IsProcessing && !_userResponse.IsError && _userResponse.Value.FamilyId.HasValue)
{
    <div class="mt-4">
        <div class="row pt-2">
            <h1>My Family's Meals</h1>
        </div>
        <div>
            @if (_familyMealsResponse.IsProcessing)
            {
                <p>Loading family meals...</p>
            }
            else if (_familyMealsResponse.IsError)
            {
                <p class="text-center text-danger">Error loading family meals...</p>
            }
            else if ((_userMealsResponse.Value.Count == 0))
            {
                <p class="text-muted text-center my-5">No one else in your family has added meals.</p>
            }
            else
            {
                <div class="row">
                    @foreach (var meal in _familyMealsResponse.Value)
                    {
                        <Section Css="col-sm-6">
                            <FamilyMealRow Meal="@meal" />
                        </Section>
                    }
                </div>
            }
        </div>
    </div>
}

<Dialog Title="Delete Meal?" Opened="@isDeleteMealDialogOpened"
    CloseButtonClicked="@(() => isDeleteMealDialogOpened = false)">
    <BodyContent>
        <div class="pb-4">
            Are you sure you want to delete the meal with the name <span class="fw-bold">@mealToDelete?.Name</span>?
            This action cannot be undone.
        </div>
    </BodyContent>
    <FooterContent>
        <div class="text-end">
            <button class="btn btn-outline-primary" @onclick="() => isDeleteMealDialogOpened = false">Cancel</button>
            <button class="btn btn-danger" @onclick="DeleteMeal">Delete</button>
        </div>
    </FooterContent>
</Dialog>


@code {
    private ApiResult<UserResponse> _userResponse = new();
    private ApiResult<List<MealResponse>> _userMealsResponse = new();
    private ApiResult<List<MealResponse>> _familyMealsResponse = new();
    private ApiResult<bool> _deleteMealResponse = new();

    private bool isDeleteMealDialogOpened = false;
    private MealResponse? mealToDelete;

    protected override async Task OnInitializedAsync()
    {
        _userMealsResponse = await _mealService.GetUserMealsAsync(CancellationToken.None);
        _familyMealsResponse = await _mealService.GetFamilyMealsAsync(CancellationToken.None);
        _userResponse = await _userService.GetUserAsync(CancellationToken.None);
    }

    private async Task HandleDelete(MealResponse meal)
    {
        mealToDelete = meal;
        isDeleteMealDialogOpened = true;
    }
    private async Task DeleteMeal()
    {
        if (mealToDelete is not null && _userMealsResponse.HasValue)
        {
            _userMealsResponse.Value.Remove(mealToDelete!);
            _deleteMealResponse = await _mealService.DeleteMealAsync(mealToDelete.MealId, CancellationToken.None);
        }

        isDeleteMealDialogOpened = false;
    }
}