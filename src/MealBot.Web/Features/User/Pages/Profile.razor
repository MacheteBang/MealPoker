@page "/profile"
@attribute [Authorize]
@inject UserAuthenticationStateProvider _userAuthenticationStateProvider
@inject IBrowserStorageService _browserStorageService
@inject IUserService _userService
@inject IFamilyService _familyService

<PageTitle>Profile</PageTitle>

<style>
    #gfg {
        overflow-x: auto;
        white-space: pre-wrap;
        word-wrap: break-word;
        font-size: 15px;
    }

    pre {
        overflow-x: auto;
    }
</style>

<div class="mx-auto" style="max-width: 512px;">
    <div class="text-center">
        <img src="@_userAuthenticationStateProvider.CurrentUser.PictureUri" style="border-radius:50%;height:128px;"
            alt="@(_userAuthenticationStateProvider.CurrentUser.FirstName + ' ' + _userAuthenticationStateProvider.CurrentUser.LastName)" />
        <h1>
            @_userAuthenticationStateProvider.CurrentUser.FirstName
            @_userAuthenticationStateProvider.CurrentUser.LastName
        </h1>
    </div>
    <div class="mb-3">
        @if (_userResponse.IsProcessing)
        {
            <p>Loading User Profile...</p>
        }
        else
        {
            if (_userResponse.IsError)
            {
                <p class="text-center text-danger">There was an error retrieving the user profile.</p>
            }
            else
            {
                <AddEditFamily FamilyId="@_userResponse.Value.FamilyId"
                    OnCreateFamily="async () => await LoadUser(CancellationToken.None)"
                    OnLeaveFamily="async () => await LoadUser(CancellationToken.None)"
                    OnJoinFamily="async () => await LoadUser(CancellationToken.None)" />
            }
        }
    </div>

    <div class="mb-3">
        <h4>Current Token</h4>
        <pre id="gfg">
            @_accessToken
        </pre>
    </div>

    <div class="text-center">
        <a class="btn btn-primary" href="signout">Sign Out</a>
    </div>
</div>

@code
{
    private bool _isBusy_User = true;

    private string _accessToken = string.Empty;
    private ApiResult<UserResponse> _userResponse = new();
    private FamilyResponse? _familyResponse;

    protected override async Task OnInitializedAsync()
    {
        _accessToken = await _browserStorageService.GetAccessTokenAsync();
        await LoadUser(CancellationToken.None);
        await _userAuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task LoadUser(CancellationToken cancellationToken)
    {
        _userResponse = await _userService.GetUserAsync(cancellationToken);
        StateHasChanged();
    }
}