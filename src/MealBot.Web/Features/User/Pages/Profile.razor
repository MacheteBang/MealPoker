@page "/profile"
@attribute [Authorize]
@inject UserAuthenticationStateProvider _userAuthenticationStateProvider
@inject IBrowserStorageService _browserStorageService
@inject IUserService _userService
@inject IFamilyService _familyService

<PageTitle>Profile</PageTitle>

<style>
    #gfg {
        overflow-x: auto;
        white-space: pre-wrap;
        word-wrap: break-word;
        font-size: 15px;
    }

    pre {
        overflow-x: auto;
    }
</style>

<div class="mx-auto" style="max-width: 512px;">
    <div class="text-center">
        <img src="@_userAuthenticationStateProvider.CurrentUser.PictureUri" style="border-radius:50%;height:128px;"
            alt="@(_userAuthenticationStateProvider.CurrentUser.FirstName + ' ' + _userAuthenticationStateProvider.CurrentUser.LastName)" />
        <h1>
            @_userAuthenticationStateProvider.CurrentUser.FirstName
            @_userAuthenticationStateProvider.CurrentUser.LastName
        </h1>
    </div>
    <div class="mb-3">
        <h4>Family</h4>
        @if (_isBusy_Family)
        {
            <p>Loading...</p>
        }
        else if (_userResponse?.FamilyId is not null && _familyResponse is not null)
        {
            <h6>@_familyResponse.Name</h6>
            <p>@_familyResponse.Description</p>
            <div class="text-end">
                <button class="btn btn-sm btn-danger" type="button" @onclick="LeaveFamily">
                    Leave Family
                </button>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col p-4 text-center">
                    <button class="mx-auto btn btn-primary" type="button" @onclick="JoinFamily">
                        Join Family
                    </button>
                </div>
                <div class="col p-4 text-center">
                    <button class="mx-auto btn btn-primary" type="button" @onclick="CreateFamily">
                        Create Family
                    </button>
                </div>
            </div>
        }
    </div>

    <div class="mb-3">
        <h4>Current Token</h4>
        <pre id="gfg">
            @_accessToken
        </pre>
    </div>

    <div class="text-center">
        <a class="btn btn-primary" href="signout">Sign Out</a>
    </div>
</div>

@code
{
    private bool _isBusy_User = true;
    private bool _isBusy_Family = true;

    private string _accessToken = string.Empty;
    private UserResponse? _userResponse;
    private FamilyResponse? _familyResponse;

    protected override async Task OnInitializedAsync()
    {
        _accessToken = await _browserStorageService.GetAccessTokenAsync();
        await LoadUser(CancellationToken.None);
        await LoadFamily(_userResponse?.FamilyId, CancellationToken.None);
        await _userAuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task LoadUser(CancellationToken cancellationToken)
    {
        _isBusy_User = true;
        _userResponse = await _userService.GetUserAsync(cancellationToken);
        _isBusy_User = false;
    }
    private async Task LoadFamily(Guid? familyId, CancellationToken cancellationToken)
    {
        _isBusy_Family = true;
        if (familyId is not null)
        {
            _familyResponse = await _familyService.GetFamilyAsync((Guid)familyId, cancellationToken);
        }
        _isBusy_Family = false;
    }
    private async Task JoinFamily()
    {
        _isBusy_Family = true;
        Console.WriteLine("TODO: Join Family");
        _isBusy_Family = false;
    }
    private async Task CreateFamily()
    {
        _isBusy_Family = true;
        Console.WriteLine("TODO: Create Family");
        _isBusy_Family = false;
    }
    private async Task LeaveFamily()
    {
        _isBusy_Family = true;
        Console.WriteLine("TODO: Leave Family");
        _isBusy_Family = false;
    }
}