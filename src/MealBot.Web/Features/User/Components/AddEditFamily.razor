@using MealBot.Web.Features.User.FormModels
@inject IFamilyService _familyService

<h4>Family</h4>
@if (_isBusy)
{
    <p>Loading...</p>
}
else if (FamilyId is not null && _familyResponse is not null)
{
    <h6>@_familyResponse.Name</h6>
    <p>@_familyResponse.Description</p>
    <p>
        Family Code: <code>@_familyResponse.Code</code>
    </p>
    <div class="text-end">
        <button class="btn btn-sm btn-danger" type="button" @onclick="LeaveFamily">
            Leave Family
        </button>
    </div>
}
else
{
    <div class="row">
        @if (_isCreatingFamily)
        {
            <form @onsubmit="CreateFamily">
                <div class="row mb-3">
                    <label for="familyNameInput" class="col-sm-2 col-form-label">Name</label>
                    <div class="col-sm-10">
                        <InputText @bind-Value="CreateFamilyModel.Name" class="form-control" id="familyNameInput" />
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="familyDescriptionInput" class="col-sm-2 col-form-label">Description</label>
                    <div class="col-sm-10">
                        <InputTextArea @bind-Value="CreateFamilyModel.Description" class="form-control"
                            id="familyDescriptionInput" />
                    </div>
                </div>
                <div class="text-end">
                    <button class="btn btn-primary">Create</button>
                </div>
            </form>
        }
        else if (_isJJoiningFamily)
        {
            <form @onsubmit="JoinFamily">
                <div class="row mb-3">
                    <label for="familyCodeInput" class="col-sm-3 col-form-label">Family Code</label>
                    <div class="col-sm-9">
                        <InputText @bind-Value="JoinFamilyModel.FamilyCode" class="form-control" id="familyCodeInput" />
                    </div>
                </div>
                <div class="text-end">
                    <button class="btn btn-primary">Join</button>
                </div>
            </form>
        }
        else
        {
            <div class="col p-4 text-center">
                <button class="mx-auto btn btn-primary" type="button" @onclick="() => _isJJoiningFamily = true">
                    Join Family
                </button>
            </div>
            <div class="col p-4 text-center">
                <button class="mx-auto btn btn-primary" type="button" @onclick="() => _isCreatingFamily = true">
                    Create Family
                </button>
            </div>
        }
    </div>
}
@code
{
    [SupplyParameterFromForm]
    private CreateFamilyFormModel? CreateFamilyModel { get; set; } = new();
    [SupplyParameterFromForm]
    private JoinFamilyFormModel? JoinFamilyModel { get; set; } = new();

    [Parameter] public Guid? FamilyId { get; set; }
    [Parameter] public EventCallback<FamilyResponse> OnCreateFamily { get; set; }
    [Parameter] public EventCallback OnLeaveFamily { get; set; }
    [Parameter] public EventCallback OnJoinFamily { get; set; }

    private bool _isBusy = true;
    private bool _isCreatingFamily = false;
    private bool _isJJoiningFamily = false;

    private FamilyResponse? _familyResponse;

    protected override async Task OnParametersSetAsync()
    {
        await LoadFamily(CancellationToken.None);
    }
}

@functions {
    private async Task LoadFamily(CancellationToken cancellationToken)
    {
        _isBusy = true;
        if (FamilyId is not null)
        {
            _familyResponse = await _familyService.GetFamilyAsync((Guid)FamilyId, cancellationToken);
        }
        _isBusy = false;
    }
    private async Task JoinFamily()
    {
        Console.WriteLine("Joining Family");
        if (FamilyId is not null)
        {
            Console.WriteLine("FamilyId is null");
            return;
        }

        _isBusy = true;
        await _familyService.JoinFamilyAsync(JoinFamilyModel.FamilyCode, CancellationToken.None);
        await OnJoinFamily.InvokeAsync();
        _isBusy = false;
    }
    private async Task CreateFamily()
    {
        _isBusy = true;
        _familyResponse = await _familyService.CreateFamilyAsync(CreateFamilyModel.Name, CreateFamilyModel.Description,
        CancellationToken.None);
        await OnCreateFamily.InvokeAsync(_familyResponse);
        CreateFamilyModel = new();
        _isCreatingFamily = false;
        _isBusy = false;
    }
    private async Task LeaveFamily()
    {
        if (FamilyId is null)
        {
            return;
        }

        _isBusy = true;
        await _familyService.LeaveFamilyAsync((Guid)FamilyId, CancellationToken.None);
        await OnLeaveFamily.InvokeAsync();
        _isBusy = false;
    }
}