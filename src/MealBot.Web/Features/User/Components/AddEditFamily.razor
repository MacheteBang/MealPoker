@using MealBot.Web.Features.User.FormModels
@inject IFamilyService _familyService
@inject IHttpClientFactory _httpClientFactory
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<h4>My Family</h4>
@if (_isBusy)
{
    <p>Loading...</p>
}
else if (FamilyId is not null)
{
    if (_familyResponse.IsProcessing)
    {
        <p>Loading...</p>
    }
    else if (_familyResponse.IsError)
    {
        <p class="text-center text-danger">There was an error loading the family.</p>
    }
    else
    {
        <div>
            <span class="fw-bold">@_familyResponse.Value.Name</span>
            @if (!string.IsNullOrWhiteSpace(_familyResponse.Value.Description))
            {
                <span>@_familyResponse.Value.Description</span>
            }
        </div>
        
        <div class="mt-4">
            <span class="fw-bold">Family Code</span>
        <div class="row align-items-middle mt-1">
            <div class="col  align-items-middle mt-1">
                <div class="text-center font-monospace border bg-light">
                    @_familyResponse.Value.Code
                </div>
            </div>
            <div class="col-auto">
                <button class="btn btn-sm btn-primary" type="button" @onclick="ShareFamilyCode">
                    <i class="fa-solid fa-share-from-square"></i>
                </button>
            </div>
        </div>
        </div>


        <div class="mt-4 fw-bold">Family Members</div>
        <div class="mt-1">
            @foreach (var member in _familyResponse.Value.Members ?? [])
            {
                <div class="row ms-2 align-items-middle">
                    <div class="col-auto">
                        <img src='@($"{_profileImageUrl}users/{member.UserId}/profile-images?width=32")'
                            alt="@member.FirstName @member.LastName" class="rounded-circle" />
                    </div>
                    <div class="col">
                        <p>@member.FirstName @member.LastName</p>
                    </div>
                </div>
            }
        </div>
        <div class="text-end">
            <button class="btn btn-sm btn-danger ms-1" type="button" @onclick="LeaveFamily">
                <i class="fa-solid fa-arrow-right-from-bracket"></i>
                Leave Family
            </button>
        </div>
    }
}
else
{
    <div class="row">
        @if (_isCreatingFamily)
        {
            <form @onsubmit="CreateFamily">
                <div class="row mb-3">
                    <label for="familyNameInput" class="col-sm-2 col-form-label">Name</label>
                    <div class="col-sm-10">
                        <InputText @bind-Value="CreateFamilyModel.Name" class="form-control" id="familyNameInput" />
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="familyDescriptionInput" class="col-sm-2 col-form-label">Description</label>
                    <div class="col-sm-10">
                        <InputTextArea @bind-Value="CreateFamilyModel.Description" class="form-control"
                            id="familyDescriptionInput" />
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="text-end">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => _isCreatingFamily = false">Cancel</button>
                            <button class="btn btn-sm btn-primary ms-2">Create</button>
                        </div>
                    </div>
                </div>
            </form>
        }
        else if (_isJoiningFamily)
        {
            <form @onsubmit="JoinFamily">
                <div class="row">
                    <div class="col">
                        Enter the code given to you by another family member.
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="familyCodeInput" class="col-sm-3 col-form-label">Family Code</label>
                    <div class="col-sm-9">
                        <InputText @bind-Value="JoinFamilyModel.FamilyCode" class="form-control" id="familyCodeInput" />
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="text-end">
                            <div class="@_showJoinFromUrlCss d-inline text-info">
                                Select 'Join' to join a family using this code.
                            </div>
                            <button class="btn btn-sm btn-outline-primary ms-2" @onclick="CancelJoinFamily">Cancel</button>
                            <button class="btn btn-sm btn-primary ms-2">Join</button>
                        </div>
                    </div>
                </div>
            </form>
        }
        else
        {
            <div class="col p-4 text-center">
                <button class="mx-auto btn btn-primary" type="button" @onclick="() => _isJoiningFamily = true">
                    Join Family
                </button>
            </div>
            <div class="col p-4 text-center">
                <button class="mx-auto btn btn-primary" type="button" @onclick="() => _isCreatingFamily = true">
                    Create Family
                </button>
            </div>
        }
    </div>
}

<Dialog Title="Already Part of a Family" Opened="@_alreadyPartOfFamilyDialogOpen"
    CloseButtonClicked="@(() => _alreadyPartOfFamilyDialogOpen = false)">
    <BodyContent>
        <div class="pb-4">
            You are already part of a family. You cannot join another family.
        </div>
    </BodyContent>
    <FooterContent>
        <div class="text-end">
            <button class="btn btn-primary" @onclick="@(() => _alreadyPartOfFamilyDialogOpen = false)">Ok</button>
        </div>
    </FooterContent>
</Dialog>

@code
{
    [SupplyParameterFromForm]
    private CreateFamilyFormModel CreateFamilyModel { get; set; } = new();
    [SupplyParameterFromForm]
    private JoinFamilyFormModel JoinFamilyModel { get; set; } = new();

    [Parameter] public Guid? FamilyId { get; set; }
    [Parameter] public EventCallback<FamilyResponse> OnCreateFamily { get; set; }
    [Parameter] public EventCallback OnLeaveFamily { get; set; }
    [Parameter] public EventCallback OnJoinFamily { get; set; }
    [Parameter] public string? JoinFamilyCode { get; set; }

    private bool _isBusy = true;
    private bool _isCreatingFamily = false;
    private bool _isJoiningFamily = false;

    private string _showJoinFromUrlCss = "d-none";
    private bool _alreadyPartOfFamilyDialogOpen = false;

    private ApiResult<FamilyResponse> _familyResponse = new();
    private string _profileImageUrl = "";

    protected override async Task OnParametersSetAsync()
    {
        await LoadFamily(CancellationToken.None);
    }

    protected override void OnInitialized()
    {
        var httpClient = _httpClientFactory.CreateClient();
        _profileImageUrl = $"{httpClient.BaseAddress}";

        if (!string.IsNullOrEmpty(JoinFamilyCode))
        {
            if (FamilyId is not null)
            {
                _alreadyPartOfFamilyDialogOpen = true;
            }
            else
            {
                _isJoiningFamily = true;
                JoinFamilyModel = new() {FamilyCode = JoinFamilyCode};
                _showJoinFromUrlCss = "";
            }

            _navigationManager.NavigateTo(_navigationManager.Uri.Replace($"/join-family/{JoinFamilyCode}", ""), replace: true);
        }
    }
}

@functions {
    private async Task LoadFamily(CancellationToken cancellationToken)
    {
        _isBusy = true;
        if (FamilyId is not null)
        {
            _familyResponse = await _familyService.GetFamilyAsync((Guid)FamilyId, cancellationToken);
        }
        _isBusy = false;
    }
    private async Task JoinFamily()
    {
        if (FamilyId is not null)
        {
            return;
        }

        _isBusy = true;
        await _familyService.JoinFamilyAsync(JoinFamilyModel.FamilyCode, CancellationToken.None);
        await OnJoinFamily.InvokeAsync();
        _isBusy = false;
    }
    private void CancelJoinFamily()
    {
         _isJoiningFamily = false;
         JoinFamilyModel = new();
         _showJoinFromUrlCss = "d-none";
    }
    private async Task CreateFamily()
    {
        _isBusy = true;
        _familyResponse = await _familyService.CreateFamilyAsync(CreateFamilyModel.Name, CreateFamilyModel.Description,
        CancellationToken.None);
        await OnCreateFamily.InvokeAsync(_familyResponse.Value);
        CreateFamilyModel = new();
        _isCreatingFamily = false;
        _isBusy = false;
    }
    private async Task LeaveFamily()
    {
        if (FamilyId is null)
        {
            return;
        }

        _isBusy = true;
        await _familyService.LeaveFamilyAsync((Guid)FamilyId, CancellationToken.None);
        await OnLeaveFamily.InvokeAsync();
        _isCreatingFamily = false;
        _isJoiningFamily = false;
        _isBusy = false;
    }

    private async Task ShareFamilyCode()
    {
        if (FamilyId is null)
        {
            return;
        }

        await _jsRuntime.InvokeVoidAsync("shareToDevice",
        new
        {
            Title = "Join Your Family in MealPoker",
            Text = $"Join your family in planning meals using MealPoker. Use this link to join your family: {Environment.NewLine}{Environment.NewLine}{_navigationManager.BaseUri}profile/join-family/{_familyResponse.Value.Code}",
        });
    }
}