@* This is a callback page where Google redirects the user after successful authentication *@

@page "/google-callback"
@attribute [AllowAnonymous]

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager _navigationManager
@inject IBrowserStorageService _browserStorageService
@inject ITokenService _tokenService
@inject UserAuthenticationStateProvider _userAuthenticationStateProvider

<p Text="Hang on, we're signing you in.."></p>

@code
{
    // The authorization code sent by Google after successful authentication
    [SupplyParameterFromQuery(Name = "code")]
    public string? AuthorizationCode { get; set; }

    // Optional state included in the redirect URI
    [SupplyParameterFromQuery(Name = "state")]
    public string? State { get; set; }

    private AccessTokenResponse? _accessToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(AuthorizationCode))
        {
            using var client = HttpClientFactory.CreateClient();

            string authorizationCode = Uri.EscapeDataString($"{AuthorizationCode}");
            string callBackUri = Uri.EscapeDataString($"{_navigationManager.BaseUri}google-callback");
            var request = new HttpRequestMessage(
            HttpMethod.Get,
            $"identity/tokens/google?authorizationCode={authorizationCode}&callBackUri={callBackUri}");

            try
            {
                var response = await client.SendAsync(request);
                if (response.IsSuccessStatusCode)
                {
                    _accessToken = await response.Content.ReadFromJsonAsync<AccessTokenResponse>();
                    if (_accessToken is null)
                    {
                        return;
                    }

                    await _browserStorageService.SaveAccessTokenAsync(_accessToken!.Value);
                    await _userAuthenticationStateProvider.NotifyUserLoggedin();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
        }

        _navigationManager.NavigateTo(State ?? "", replace: true);
    }
}