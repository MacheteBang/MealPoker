@page "/profile"
@attribute [Authorize]
@inject UserAuthenticationStateProvider _userAuthenticationStateProvider
@inject IBrowserStorageService _browserStorageService
@inject IUserService _userService
@inject IFamilyService _familyService

<PageTitle>Profile</PageTitle>

<style>
    #gfg {
        overflow-x: auto;
        white-space: pre-wrap;
        word-wrap: break-word;
        font-size: 15px;
    }

    pre {
        overflow-x: auto;
    }
</style>

<div class="mx-auto" style="max-width: 512px;">
    <div class="text-center">
        <img src="@_userAuthenticationStateProvider.CurrentUser.PictureUri" style="border-radius:50%;height:128px;"
            alt="@(_userAuthenticationStateProvider.CurrentUser.FirstName + ' ' + _userAuthenticationStateProvider.CurrentUser.LastName)" />
        <h1>
            @_userAuthenticationStateProvider.CurrentUser.FirstName
            @_userAuthenticationStateProvider.CurrentUser.LastName
        </h1>
    </div>
    <h4>Family</h4>
    @if (_userResponse?.FamilyId is not null)
    {
        if (_familyResponse is not null)
        {
            <h6>@_familyResponse.Name</h6>
            <p>@_familyResponse.Description</p>
        }
        else
        {
            <h6>You don't have a family</h6>
        }
        <h6></h6>
    }
    else
    {
        <p>No family found.</p>
    }
    <h4>Current Token</h4>
    <pre id="gfg">
        @_accessToken
    </pre>
    <div class="text-center">
        <a class="btn btn-primary" href="signout">Sign Out</a>
    </div>
</div>

@code
{
    private string _accessToken = string.Empty;
    private UserResponse? _userResponse;
    private FamilyResponse? _familyResponse;

    protected override async Task OnInitializedAsync()
    {
        _accessToken = await _browserStorageService.GetAccessTokenAsync();
        _userResponse = await _userService.GetUserAsync(CancellationToken.None);
        if (_userResponse?.FamilyId is not null)
        {
            _familyResponse = await _familyService.GetFamilyAsync(_userResponse.FamilyId.Value, CancellationToken.None);
        }

        await _userAuthenticationStateProvider.GetAuthenticationStateAsync();
    }
}